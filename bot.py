import logging
import os
import requests
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from typing import Dict

# ==============================
# üîë –¢–í–û–ò –¢–û–ö–ï–ù–´
# ==============================
TELEGRAM_TOKEN = "8306801846:AAEvDQFoiepNmDaxPi5UVDqiNWmz6tUO_KQ"
YANDEX_TOKEN = "y0__xCmksrUBxjjojogmLvAsxTMieHo_qAobIbgob8lZd-uDHpoew"

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
UPLOAD_DIR = "uploads"
os.makedirs(UPLOAD_DIR, exist_ok=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions: Dict[int, dict] = {}

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()


# ==============================
# üì• –ü—Ä–∏–µ–º –∫–æ–º–∞–Ω–¥
# ==============================
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ, –∏ —è –∑–∞–≥—Ä—É–∂—É –µ–≥–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ üìÇ")


@dp.message(lambda msg: msg.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    session = user_sessions.setdefault(user_id, {"photos": []})

    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
    local_filename = os.path.join(UPLOAD_DIR, f"{file_id}.jpg")
    await bot.download_file(file_path, local_filename)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
    remote_filename = f"TelegramReports/{os.path.basename(local_filename)}"
    success = upload_to_yandex(local_filename, remote_filename)

    if success:
        await message.answer("‚úÖ –§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫!")
    else:
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫.")

    session["photos"].append(local_filename)


# ==============================
# ‚òÅÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
# ==============================
def upload_to_yandex(local_path: str, remote_path: str) -> bool:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
    url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    params = {"path": remote_path, "overwrite": "true"}

    try:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
        response = requests.get(url, headers=headers, params=params)
        response.raise_for_status()
        href = response.json()["href"]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(local_path, "rb") as f:
            upload_response = requests.put(href, files={"file": f})
        upload_response.raise_for_status()

        logging.info(f"‚úÖ –§–∞–π–ª {local_path} –∑–∞–≥—Ä—É–∂–µ–Ω –∫–∞–∫ {remote_path}")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {local_path}: {e}")
        return False


# ==============================
# ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
# ==============================
scheduler = AsyncIOScheduler()


def scheduled_task():
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    logging.info(f"‚è∞ –ü–ª–∞–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ {now}")


scheduler.add_job(scheduled_task, "interval", minutes=10)


# ==============================
# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# ==============================
async def main():
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
