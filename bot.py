# bot.py ‚Äî –ø–æ–ª–Ω—ã–π –≥–æ—Ç–æ–≤—ã–π –∫–æ–¥
import os
import re
import asyncio
import logging
import requests
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.filters import Command

# ======= –¢–û–ö–ï–ù–´ =======
TELEGRAM_TOKEN = "8306801846:AAEvDQFoiepNmDaxPi5UVDqiNWmz6tUO_KQ"
YANDEX_TOKEN = "y0__xCmksrUBxjjojogmLvAsxTMieHo_qAobIbgob8lZd-uDHpoew"

# ====== –õ–û–ì–ò –ò –ë–û–¢ ======
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# ====== –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ ======
STORES = [
    "–û–ë–ò 013 –ë–µ–ª–∞—è –¥–∞—á–∞",
    "–û–ë–ò 009 –í–∞—Ä—à–∞–≤–∫–∞",
    "–û–ë–ò 017 –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–û–ë–ò 006 –ë–æ—Ä–æ–≤–∫–∞",
    "–û–ë–ò 037 –ê–≤–∏–∞–ø–∞—Ä–∫",
    "–û–ë–ò 039 –ù–æ–≤–∞—è –†–∏–≥–∞",
    "–û–ë–ò 033 –†—è–∑–∞–Ω—å",
    "–û–ë–ò 023 –í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "–û–ë–ò 042 –ë—Ä—è–Ω—Å–∫",
    "–û–ë–ò 015 –ü–∞—Ä–Ω–∞—Å",
    "–û–ë–ò 001 –¢–µ–ø–ª—ã–π —Å—Ç–∞–Ω",
    "–û–ë–ò 011 –§–µ–¥—è–∫–æ–≤–æ",
    "–û–ë–ò 016 –õ–∞—Ö—Ç–∞",
    "–û–ë–ò 035 –ú–∏—Ç–∏–Ω–æ",
    "–û–ë–ò 108 –ö–∞–∑–∞–Ω—å",
]

# –ë–∞–∑–∞ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
YANDEX_BASE = "/Sam/–ü—Ä–æ–µ–∫—Ç Crown/–§–æ—Ç–æ–æ—Ç—á–µ—Ç—ã CROWN"

# –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: user_id -> { store, files: [paths], status_msg: (chat_id, message_id) }
user_sessions = {}

# ====== –£–¢–ò–õ–ò–¢–´ (Yandex) ======
def ensure_folder_exists(folder_path: str) -> bool:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources"
    params = {"path": folder_path}
    try:
        r = requests.put(url, headers=headers, params=params, timeout=30)
        return r.status_code in (201, 409)
    except Exception as e:
        logging.exception("ensure_folder_exists error")
        return False

def upload_to_yandex(local_file: str, remote_path: str) -> bool:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {"path": remote_path, "overwrite": "true"}
    try:
        resp = requests.get(url, headers=headers, params=params, timeout=30)
        if resp.status_code != 200:
            logging.error("Get upload href failed %s %s", resp.status_code, resp.text)
            return False
        upload_url = resp.json().get("href")
        if not upload_url:
            logging.error("No href in response")
            return False
        with open(local_file, "rb") as f:
            r = requests.put(upload_url, files={"file": f}, timeout=60)
        return r.status_code in (201, 202)
    except Exception:
        logging.exception("upload_to_yandex error")
        return False

def get_week_folder(dt=None) -> str:
    if dt is None:
        dt = datetime.now()
    start = dt - timedelta(days=dt.weekday())
    end = start + timedelta(days=6)
    return f"{start.day:02}.{start.month:02}-{end.day:02}.{end.month:02}"

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======
def build_stores_keyboard() -> InlineKeyboardMarkup:
    def store_key(s: str) -> int:
        nums = re.findall(r"\d+", s)
        return int(nums[-1]) if nums else 0

    sorted_stores = sorted(STORES, key=store_key)
    buttons = [InlineKeyboardButton(text=s, callback_data=f"store:{s}") for s in sorted_stores]
    rows = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_single_send_keyboard() -> InlineKeyboardMarkup:
    btn = InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="confirm_upload")
    return InlineKeyboardMarkup(inline_keyboard=[[btn]])

# ====== –ö–û–ú–ê–ù–î–´ ======
@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /–æ—Ç—á–µ—Ç")

@dp.message(Command("–æ—Ç—á–µ—Ç"))
async def cmd_report(message: Message):
    user_sessions.pop(message.from_user.id, None)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω (–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É):", reply_markup=build_stores_keyboard())

@dp.message(Command("–æ—Ç–º–µ–Ω–∞"))
async def cmd_cancel(message: Message):
    user_sessions.pop(message.from_user.id, None)
    await message.answer("–°–µ—Å—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ /–æ—Ç—á–µ—Ç –∑–∞–Ω–æ–≤–æ.")

# ====== –í–´–ë–û–† –ú–ê–ì–ê–ó–ò–ù–ê ======
@dp.callback_query(lambda c: c.data and c.data.startswith("store:"))
async def process_store_choice(cq: CallbackQuery):
    await cq.answer()
    user_id = cq.from_user.id
    store = cq.data.split(":", 1)[1]
    user_sessions[user_id] = {
        "store": store,
        "files": [],
        "status_msg": None,
        "tmp_dir": os.path.join("tmp_reports", str(user_id)),
    }
    os.makedirs(user_sessions[user_id]["tmp_dir"], exist_ok=True)

    await cq.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–≥–∞–∑–∏–Ω:\n<b>{store}</b>\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ. –ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç¬ª.",
        reply_markup=None,
        parse_mode="HTML",
    )

@dp.callback_query(lambda c: c.data == "cancel")
async def on_cancel(cq: CallbackQuery):
    await cq.answer()
    user_sessions.pop(cq.from_user.id, None)
    await cq.message.answer("–û—Ç–º–µ–Ω–∞ –≤—ã–±–æ—Ä–∞. –°–µ—Å—Å–∏—è –æ—á–∏—â–µ–Ω–∞.")

# ====== –û–ë–†–ê–ë–û–¢–ö–ê –§–û–¢–û ======
@dp.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if not session:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /–æ—Ç—á–µ—Ç –∏ –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω.")
        return

    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    tmp_dir = session["tmp_dir"]
    os.makedirs(tmp_dir, exist_ok=True)

    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    local_filename = os.path.join(tmp_dir, f"{timestamp}_{photo.file_id}.jpg")

    await bot.download_file(file_info.file_path, destination=local_filename)
    session["files"].append(local_filename)

    total = len(session["files"])
    status_text = f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ  –í—Å–µ–≥–æ: {total} —à—Ç.\n\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç."

    if not session.get("status_msg"):
        sent = await message.answer(status_text, reply_markup=build_single_send_keyboard())
        session["status_msg"] = (sent.chat.id, sent.message_id)
    else:
        chat_id, msg_id = session["status_msg"]
        try:
            await bot.edit_message_text(
                text=status_text,
                chat_id=chat_id,
                message_id=msg_id,
                reply_markup=build_single_send_keyboard()
            )
        except Exception:
            sent = await message.answer(status_text, reply_markup=build_single_send_keyboard())
            session["status_msg"] = (sent.chat.id, sent.message_id)

# ====== –û–¢–ü–†–ê–í–ö–ê –ù–ê –Ø–ù–î–ï–ö–° ======
@dp.callback_query(lambda c: c.data == "confirm_upload")
async def on_confirm_upload(cq: CallbackQuery):
    await cq.answer()
    user_id = cq.from_user.id
    session = user_sessions.get(user_id)
    if not session or not session.get("files"):
        await cq.message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ /–æ—Ç—á–µ—Ç.")
        return

    chat_id, msg_id = session.get("status_msg", (cq.message.chat.id, cq.message.message_id))
    uploading_text = "–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
    try:
        await bot.edit_message_text(text=uploading_text, chat_id=chat_id, message_id=msg_id)
    except Exception:
        await cq.message.answer(uploading_text)

    store = session["store"]
    files = list(session["files"])
    week_folder = get_week_folder()
    base = YANDEX_BASE
    week_path = f"{base}/{week_folder}"
    store_path = f"{week_path}/{store}"

    def do_upload():
        results = {"uploaded": 0, "total": len(files)}
        ensure_folder_exists(base)
        ensure_folder_exists(week_path)
        ensure_folder_exists(store_path)
        for local_file in files:
            remote_path = f"{store_path}/{os.path.basename(local_file)}"
            ok = upload_to_yandex(local_file, remote_path)
            if ok:
                results["uploaded"] += 1
                try:
                    os.remove(local_file)
                except Exception:
                    pass
        try:
            tmpdir = session.get("tmp_dir")
            if tmpdir and os.path.isdir(tmpdir) and not os.listdir(tmpdir):
                os.rmdir(tmpdir)
        except Exception:
            pass
        return results

    results = await asyncio.to_thread(do_upload)
    user_sessions.pop(user_id, None)

    final_text = (
        f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {results['uploaded']} –∏–∑ {results['total']}.\n"
        f"–ü–∞–ø–∫–∞: {store_path}"
    )
    try:
        await bot.edit_message_text(text=final_text, chat_id=chat_id, message_id=msg_id)
    except Exception:
        await cq.message.answer(final_text)

# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram...")
    dp.run_polling(bot)
