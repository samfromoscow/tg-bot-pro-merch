# bot.py ‚Äî –æ—Ç—á—ë—Ç—ã —Å –∞–Ω—Ç–∏-—Å–ø–∞–º —Å—Ç–∞—Ç—É—Å–æ–º, –ú–æ—Å–∫–≤–∞-—Ç–∞–π–º, admin /status + /addstore + /delstore (—Å–ø–∏—Å–æ–∫)
import os
import re
import json
import asyncio
import logging
import requests
from datetime import datetime, timedelta
from typing import Dict, Any, List, Tuple, Optional, Set

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    BotCommandScopeChat,
)
from aiogram.filters import Command

# === –¢–û–ö–ï–ù–´ (–∏–∑ —Ç–≤–æ–µ–π –≤–µ—Ä—Å–∏–∏) ===
TELEGRAM_TOKEN = "8306801846:AAEvDQFoiepNmDaxPi5UVDqiNWmz6tUO_KQ"
YANDEX_TOKEN   = "y0__xCmksrUBxjjojogmLvAsxTMieHo_qAobIbgob8lZd-uDHpoew"

# === –ê–î–ú–ò–ù ===
ADMIN_ID = 445526501  # —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã /status /addstore /delstore –∏ –≤–∏–¥–Ω–æ –∏—Ö –≤ –º–µ–Ω—é

# === –õ–û–ì–ò –ò –ë–û–¢ ===
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp  = Dispatcher()

# === –ö–û–ù–°–¢–ê–ù–¢–´ ===
SUMMARY_DELAY_SEC = 2.0  # –ø–∞—É–∑–∞ —Ç–∏—à–∏–Ω—ã, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω —Å—Ç–∞—Ç—É—Å
STORES_JSON = "stores.json"  # —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –º–∞–≥–∞–∑–∏–Ω–æ–≤
PAGE_SIZE = 9  # –ø–æ —Å–∫–æ–ª—å–∫–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏

# === –ú–û–°–ö–û–í–°–ö–û–ï –í–†–ï–ú–Ø ===
try:
    from zoneinfo import ZoneInfo  # py>=3.9; —É –Ω–∞—Å –µ—Å—Ç—å backports –≤ reqs
except Exception:
    from backports.zoneinfo import ZoneInfo  # py3.8 fallback
MOSCOW_TZ = ZoneInfo("Europe/Moscow")

# === –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
# user_id -> {"store": str, "files": List[str], "tmp_dir": str,
#             "status_msg": Optional[Tuple[int,int]], "summary_task": Optional[asyncio.Task]}
user_sessions: Dict[int, Dict[str, Any]] = {}

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–∞–º—è—Ç—å –æ–± –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö –∑–∞ –Ω–µ–¥–µ–ª—é (fallback)
# submitted_by_week["DD.MM-DD.MM"] = set(store_names)
submitted_by_week: Dict[str, Set[str]] = {}

# –ù–µ–±–æ–ª—å—à–æ–π "–æ–∂–∏–¥–∞—Ç–µ–ª—å" –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞)
admin_wait_add: Dict[int, bool] = {}  # user_id -> True –µ—Å–ª–∏ –∂–¥—ë–º —Ç–µ–∫—Å—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞


# === STORES (load/save) ===
SEED_STORES: List[str] = [
    "–û–ë–ò 013 –ë–µ–ª–∞—è –¥–∞—á–∞",
    "–û–ë–ò 009 –í–∞—Ä—à–∞–≤–∫–∞",
    "–û–ë–ò 017 –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–û–ë–ò 006 –ë–æ—Ä–æ–≤–∫–∞",
    "–û–ë–ò 037 –ê–≤–∏–∞–ø–∞—Ä–∫",
    "–û–ë–ò 039 –ù–æ–≤–∞—è –†–∏–≥–∞",
    "–û–ë–ò 033 –†—è–∑–∞–Ω—å",
    "–û–ë–ò 023 –í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "–û–ë–ò 042 –ë—Ä—è–Ω—Å–∫",
    "–û–ë–ò 015 –ü–∞—Ä–Ω–∞—Å",
    "–û–ë–ò 001 –¢–µ–ø–ª—ã–π —Å—Ç–∞–Ω",
    "–û–ë–ò 011 –§–µ–¥—è–∫–æ–≤–æ",
    "–û–ë–ò 016 –õ–∞—Ö—Ç–∞",
    "–û–ë–ò 035 –ú–∏—Ç–∏–Ω–æ",
    "–û–ë–ò 108 –ö–∞–∑–∞–Ω—å",
]

def load_stores() -> List[str]:
    if not os.path.exists(STORES_JSON):
        with open(STORES_JSON, "w", encoding="utf-8") as f:
            json.dump(SEED_STORES, f, ensure_ascii=False, indent=2)
        logging.info("stores.json created with seed list (%d)", len(SEED_STORES))
        return list(SEED_STORES)
    try:
        with open(STORES_JSON, "r", encoding="utf-8") as f:
            data = json.load(f)
        if not isinstance(data, list):
            raise ValueError("stores.json corrupted")
        return [str(x) for x in data]
    except Exception:
        logging.exception("Failed to read stores.json, fallback to seed")
        return list(SEED_STORES)

def save_stores(stores: List[str]) -> None:
    try:
        with open(STORES_JSON, "w", encoding="utf-8") as f:
            json.dump(stores, f, ensure_ascii=False, indent=2)
    except Exception:
        logging.exception("Failed to save stores.json")


# === –£–¢–ò–õ–ò–¢–´ (Yandex.Disk) ===
def ensure_folder_exists(folder_path: str) -> bool:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources"
    params = {"path": folder_path}
    try:
        r = requests.put(url, headers=headers, params=params, timeout=30)
        return r.status_code in (201, 409)
    except Exception:
        logging.exception("ensure_folder_exists error")
        return False

def upload_to_yandex(local_file: str, remote_path: str) -> bool:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {"path": remote_path, "overwrite": "true"}
    try:
        resp = requests.get(url, headers=headers, params=params, timeout=30)
        if resp.status_code != 200:
            logging.error("Get upload href failed %s %s", resp.status_code, resp.text)
            return False
        upload_url = resp.json().get("href")
        if not upload_url:
            logging.error("No href in response")
            return False
        with open(local_file, "rb") as f:
            r = requests.put(upload_url, files={"file": f}, timeout=120)
        return r.status_code in (201, 202)
    except Exception:
        logging.exception("upload_to_yandex error")
        return False

def list_folder_children(folder_path: str) -> List[str]:
    """–°–ø–∏—Å–æ–∫ –∏–º—ë–Ω –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–∞ –Ø.–î–∏—Å–∫–µ."""
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources"
    params = {
        "path": folder_path,
        "limit": 1000,
        "fields": "_embedded.items.name,_embedded.items.type"
    }
    try:
        r = requests.get(url, headers=headers, params=params, timeout=30)
        if r.status_code != 200:
            logging.warning("list_folder_children %s -> %s %s", folder_path, r.status_code, r.text)
            return []
        data = r.json()
        items = data.get("_embedded", {}).get("items", [])
        return [it.get("name") for it in items if it.get("type") == "dir"]
    except Exception:
        logging.exception("list_folder_children error")
        return []

# –ë–∞–∑–∞ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
YANDEX_BASE = "/Sam/–ü—Ä–æ–µ–∫—Ç Crown/–§–æ—Ç–æ–æ—Ç—á–µ—Ç—ã CROWN"

def get_week_folder(now: Optional[datetime] = None) -> str:
    """–ù–µ–¥–µ–ª—è –ø–æ –ú–æ—Å–∫–≤–µ: –ü–Ω‚Äì–í—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'DD.MM-DD.MM'."""
    if now is None:
        now = datetime.now(MOSCOW_TZ)
    # –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    start = (now - timedelta(days=now.weekday()))
    end = start + timedelta(days=6)
    return f"{start.day:02}.{start.month:02}-{end.day:02}.{end.month:02}"


# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===
def _store_sort_key(s: str) -> int:
    nums = re.findall(r"\d+", s)
    return int(nums[-1]) if nums else 0

def build_stores_keyboard() -> InlineKeyboardMarkup:
    stores = sorted(load_stores(), key=_store_sort_key)
    buttons = [InlineKeyboardButton(text=s, callback_data=f"store:{s}") for s in stores]
    rows = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_send_keyboard() -> InlineKeyboardMarkup:
    btn = InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="confirm_upload")
    return InlineKeyboardMarkup(inline_keyboard=[[btn]])

def build_delstore_page(page: int = 0) -> InlineKeyboardMarkup:
    stores = sorted(load_stores(), key=_store_sort_key)
    total = len(stores)
    if total == 0:
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="del_close")]
        ])

    pages = (total + PAGE_SIZE - 1) // PAGE_SIZE
    page = max(0, min(page, pages - 1))
    start = page * PAGE_SIZE
    chunk = stores[start:start + PAGE_SIZE]

    kb_rows: List[List[InlineKeyboardButton]] = []
    for name in chunk:
        kb_rows.append([
            InlineKeyboardButton(text=name, callback_data=f"delstore:{name}")
        ])

    nav_row: List[InlineKeyboardButton] = []
    if pages > 1:
        if page > 0:
            nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"delpage:{page-1}"))
        nav_row.append(InlineKeyboardButton(text=f"{page+1}/{pages}", callback_data="noop"))
        if page < pages - 1:
            nav_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∂Ô∏è", callback_data=f"delpage:{page+1}"))
    if nav_row:
        kb_rows.append(nav_row)

    kb_rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="del_close")])
    return InlineKeyboardMarkup(inline_keyboard=kb_rows)

def build_del_confirm(name: str) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"delconfirm:yes:{name}")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞",  callback_data=f"delconfirm:no:{name}")],
    ])


# === –•–≠–õ–ü–ï–†–´ (–∞–Ω—Ç–∏-—Å–ø–∞–º —Å—Ç–∞—Ç—É—Å) ===
async def schedule_summary_message(message: Message, user_id: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑ –û–î–ù–û–ì–û —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–∞—É–∑—ã SUMMARY_DELAY_SEC."""
    session = user_sessions.get(user_id)
    if not session:
        return

    # –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
    task: Optional[asyncio.Task] = session.get("summary_task")
    if task and not task.done():
        task.cancel()
        try:
            await task
        except Exception:
            pass

    async def delayed():
        try:
            await asyncio.sleep(SUMMARY_DELAY_SEC)
            sess = user_sessions.get(user_id)
            if not sess:
                return
            total = len(sess["files"])
            text = (
                f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ  –í—Å–µ–≥–æ: {total} —à—Ç.\n\n"
                f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç."
            )
            kb = build_send_keyboard()
            if sess.get("status_msg"):
                chat_id, msg_id = sess["status_msg"]
                try:
                    await bot.edit_message_text(text=text, chat_id=chat_id, message_id=msg_id, reply_markup=kb)
                except Exception:
                    sent = await message.answer(text, reply_markup=kb)
                    sess["status_msg"] = (sent.chat.id, sent.message_id)
            else:
                sent = await message.answer(text, reply_markup=kb)
                sess["status_msg"] = (sent.chat.id, sent.message_id)
        except asyncio.CancelledError:
            return

    session["summary_task"] = asyncio.create_task(delayed())

def clear_summary_task(session: Dict[str, Any]):
    task: Optional[asyncio.Task] = session.get("summary_task")
    if task and not task.done():
        task.cancel()


# === –ö–û–ú–ê–ù–î–´ –î–õ–Ø –°–û–¢–†–£–î–ù–ò–ö–û–í ===
@dp.message(Command("otchet"))
async def cmd_report(message: Message):
    # –Ω–æ–≤–∞—è —á–∏—Å—Ç–∞—è —Å–µ—Å—Å–∏—è
    user_sessions.pop(message.from_user.id, None)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω (–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É):", reply_markup=build_stores_keyboard())

@dp.callback_query(lambda c: c.data and c.data.startswith("store:"))
async def process_store_choice(cq: CallbackQuery):
    await cq.answer()
    user_id = cq.from_user.id
    store = cq.data.split(":", 1)[1]

    tmp_dir = os.path.join("tmp_reports", str(user_id))
    os.makedirs(tmp_dir, exist_ok=True)

    user_sessions[user_id] = {
        "store": store,
        "files": [],
        "tmp_dir": tmp_dir,
        "status_msg": None,        # (chat_id, message_id)
        "summary_task": None,      # asyncio.Task
    }

    await cq.message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.\n–ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç¬ª.")

@dp.callback_query(lambda c: c.data == "cancel")
async def on_cancel(cq: CallbackQuery):
    await cq.answer()
    sess = user_sessions.pop(cq.from_user.id, None)
    if sess:
        clear_summary_task(sess)
    await cq.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /otchet")

@dp.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if not session:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /otchet –∏ –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    ts = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d_%H-%M-%S")
    local_filename = os.path.join(session["tmp_dir"], f"{ts}_{photo.file_id}.jpg")
    await bot.download_file(file_info.file_path, destination=local_filename)
    session["files"].append(local_filename)

    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –û–î–ò–ù —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
    await schedule_summary_message(message, user_id)

@dp.callback_query(lambda c: c.data == "confirm_upload")
async def on_confirm_upload(cq: CallbackQuery):
    await cq.answer()
    user_id = cq.from_user.id
    session = user_sessions.get(user_id)
    if not session or not session.get("files"):
        await cq.message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ /otchet.")
        return

    # —É–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ —Ç–∞–π–º–µ—Ä
    clear_summary_task(session)
    if session.get("status_msg"):
        chat_id, msg_id = session["status_msg"]
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
        session["status_msg"] = None

    loading = await cq.message.answer("–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    store = session["store"]
    files = list(session["files"])
    week_folder = get_week_folder()
    base = YANDEX_BASE
    week_path = f"{base}/{week_folder}"
    store_path = f"{week_path}/{store}"

    def do_upload():
        ensure_folder_exists(base)
        ensure_folder_exists(week_path)
        ensure_folder_exists(store_path)
        uploaded = 0
        for local_file in files:
            remote_path = f"{store_path}/{os.path.basename(local_file)}"
            if upload_to_yandex(local_file, remote_path):
                uploaded += 1
                try:
                    os.remove(local_file)
                except Exception:
                    pass
        # —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É (–µ—Å–ª–∏ –æ–ø—É—Å—Ç–µ–ª–∞)
        try:
            tmpdir = session.get("tmp_dir")
            if tmpdir and os.path.isdir(tmpdir) and not os.listdir(tmpdir):
                os.rmdir(tmpdir)
        except Exception:
            pass
        return uploaded, len(files)

    loop = asyncio.get_event_loop()  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å Python 3.8
    uploaded, total = await loop.run_in_executor(None, do_upload)

    # –ø–æ–º–µ—Ç–∏–º, —á—Ç–æ —É —ç—Ç–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –µ—Å—Ç—å –æ—Ç—á—ë—Ç –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
    if uploaded > 0:
        submitted_by_week.setdefault(week_folder, set()).add(store)

    try:
        await bot.delete_message(loading.chat.id, loading.message_id)
    except Exception:
        pass

    final_text = (
        f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded} –∏–∑ {total}.\n"
        f"–ü–∞–ø–∫–∞: {store_path}"
    )
    await cq.message.answer(final_text)

    user_sessions.pop(user_id, None)


# === –ê–î–ú–ò–ù: /status ===
@dp.message(Command("status"))
async def cmd_status(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    week = get_week_folder()
    week_path = f"{YANDEX_BASE}/{week}"

    # –º–∞–≥–∞–∑–∏–Ω—ã —Å –æ—Ç—á—ë—Ç–∞–º–∏ –∏–∑ –Ø.–î–∏—Å–∫–∞ (–ø–∞–ø–∫–∏ –≤–Ω—É—Ç—Ä–∏ week_path)
    existing_dirs = set(list_folder_children(week_path))
    if not existing_dirs:
        # fallback –∫ –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω/–ø—É—Å—Ç–æ
        existing_dirs = submitted_by_week.get(week, set())

    stores = load_stores()
    total = len(stores)
    done = sorted([s for s in stores if s in existing_dirs], key=_store_sort_key)
    missing = sorted([s for s in stores if s not in existing_dirs], key=_store_sort_key)

    text_lines = [
        f"üìÜ –ù–µ–¥–µ–ª—è: {week}",
        f"‚úÖ –û—Ç—á—ë—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(done)} / {total}",
    ]
    if missing:
        text_lines.append("\n‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏:")
        for s in missing:
            text_lines.append(f"‚Ä¢ {s}")
    else:
        text_lines.append("\nüéâ –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –æ—Ç—á—ë—Ç!")

    await message.answer("\n".join(text_lines))


# === –ê–î–ú–ò–ù: /addstore (–≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é) ===
@dp.message(Command("addstore"))
async def cmd_addstore(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω —Å—Ä–∞–∑—É –Ω–∞–ø–∏—Å–∞–ª –Ω–∞–∑–≤–∞–Ω–∏–µ: /addstore –û–ë–ò 034 –°–∞—Ä–∞—Ç–æ–≤
    parts = message.text.split(maxsplit=1)
    if len(parts) == 2 and parts[1].strip():
        name = parts[1].strip()
        stores = load_stores()
        if name in stores:
            await message.answer("–¢–∞–∫–æ–π –º–∞–≥–∞–∑–∏–Ω —É–∂–µ –µ—Å—Ç—å.")
            return
        stores.append(name)
        save_stores(stores)
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {name}")
        return

    # –∏–Ω–∞—á–µ –ø–æ–ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    admin_wait_add[message.from_user.id] = True
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π.\n–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–û–ë–ò 034 –°–∞—Ä–∞—Ç–æ–≤¬ª")

@dp.message(F.text)
async def on_admin_add_name(message: Message):
    # –ª–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∂–¥—ë–º –æ—Ç –∞–¥–º–∏–Ω–∞ /addstore
    if message.from_user.id != ADMIN_ID:
        return
    if not admin_wait_add.get(message.from_user.id):
        return
    name = message.text.strip()
    if not name:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    stores = load_stores()
    if name in stores:
        await message.answer("–¢–∞–∫–æ–π –º–∞–≥–∞–∑–∏–Ω —É–∂–µ –µ—Å—Ç—å.")
    else:
        stores.append(name)
        save_stores(stores)
        await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω: {name}")
    admin_wait_add.pop(message.from_user.id, None)


# === –ê–î–ú–ò–ù: /delstore (—Å–ø–∏—Å–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º) ===
@dp.message(Command("delstore"))
async def cmd_delstore(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    kb = build_delstore_page(page=0)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("delpage:"))
async def on_del_page(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    try:
        page = int(cq.data.split(":", 1)[1])
    except Exception:
        page = 0
    await cq.message.edit_reply_markup(reply_markup=build_delstore_page(page))
    await cq.answer()

@dp.callback_query(F.data.startswith("delstore:"))
async def on_del_select(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    name = cq.data.split(":", 1)[1]
    await cq.message.edit_text(f"–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω?\n\n{name}", reply_markup=build_del_confirm(name))
    await cq.answer()

@dp.callback_query(F.data.startswith("delconfirm:"))
async def on_del_confirm(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    _, answer, name = cq.data.split(":", 2)
    if answer == "yes":
        stores = load_stores()
        if name in stores:
            stores = [s for s in stores if s != name]
            save_stores(stores)
            await cq.message.edit_text(f"‚úÖ –£–¥–∞–ª—ë–Ω: {name}")
        else:
            await cq.message.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ —É–∂–µ —É–¥–∞–ª—ë–Ω).")
    else:
        await cq.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await cq.answer()

@dp.callback_query(lambda c: c.data == "del_close")
async def on_del_close(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    try:
        await cq.message.delete()
    except Exception:
        pass
    await cq.answer()

@dp.callback_query(F.data == "noop")
async def on_noop(cq: CallbackQuery):
    await cq.answer(cache_time=1)


# === on_startup: –∞–¥–º–∏–Ω-–º–µ–Ω—é —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN_ID ===
async def on_startup(bot: Bot):
    try:
        await bot.set_my_commands(
            commands=[
                BotCommand(command="otchet",   description="–ù–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç"),
                BotCommand(command="status",   description="–°—Ç–∞—Ç—É—Å –æ—Ç—á—ë—Ç–æ–≤"),
                BotCommand(command="addstore", description="–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
                BotCommand(command="delstore", description="–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
            ],
            scope=BotCommandScopeChat(chat_id=ADMIN_ID),
        )
    except Exception as e:
        logging.warning("Can't set admin-only menu: %s", e)

dp.startup.register(on_startup)


# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram...")
    dp.run_polling(bot)
