import logging
import os
import requests
from datetime import datetime
from typing import Dict, Any, List

from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from tzlocal import get_localzone


# üîπ –¢–æ–∫–µ–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "8306801846:AAEvDQFoiepNmDaxPi5UVDqiNWmz6tUO_KQ"
YANDEX_DISK_TOKEN = "y0__xCmksrUBxjjojogmLvAsxTMieHo_qAobIbgob8lZd-uDHpoew"

BASE_FOLDER = "/TelegramReports"

# üîπ –°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤
STORES = [
    "–û–ë–ò 013 –ë–µ–ª–∞—è –¥–∞—á–∞",
    "–û–ë–ò 009 –í–∞—Ä—à–∞–≤–∫–∞",
    "–û–ë–ò 017 –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–û–ë–ò 006 –ë–æ—Ä–æ–≤–∫–∞",
    "–û–ë–ò 037 –ê–≤–∏–∞–ø–∞—Ä–∫",
    "–û–ë–ò 039 –ù–æ–≤–∞—è –†–∏–≥–∞",
    "–û–ë–ò 033 –†—è–∑–∞–Ω—å",
    "–û–ë–ò 023 –í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "–û–ë–ò 042 –ë—Ä—è–Ω—Å–∫",
    "–û–ë–ò 015 –ü–∞—Ä–Ω–∞—Å",
    "–û–ë–ò 001 –¢–µ–ø–ª—ã–π —Å—Ç–∞–Ω",
    "–û–ë–ò 011 –§–µ–¥—è–∫–æ–≤–æ",
    "–û–ë–ò 016 –õ–∞—Ö—Ç–∞",
    "–û–ë–ò 035 –ú–∏—Ç–∏–Ω–æ",
    "–û–ë–ò 108 –ö–∞–∑–∞–Ω—å",
]

# üîπ –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}  # {user_id: {"photos": [], "store": str}}


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ ---

def create_folder(path: str):
    """–°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ (–µ—Å–ª–∏ –Ω–µ—Ç)"""
    url = "https://cloud-api.yandex.net/v1/disk/resources"
    headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
    params = {"path": path}
    response = requests.put(url, headers=headers, params=params)
    if response.status_code not in (201, 409):  # 201 = —Å–æ–∑–¥–∞–Ω–æ, 409 = —É–∂–µ –µ—Å—Ç—å
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏ {path}: {response.text}")


def upload_file(path: str, file_data: bytes):
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
    url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    headers = {"Authorization": f"OAuth {YANDEX_DISK_TOKEN}"}
    params = {"path": path, "overwrite": "true"}
    response = requests.get(url, headers=headers, params=params)
    if response.status_code == 200:
        upload_url = response.json().get("href")
        res = requests.put(upload_url, files={"file": file_data})
        if res.status_code not in (201, 202):
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ {path}: {res.text}")
    else:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ {path}: {response.text}")


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---

def store_keyboard():
    kb = InlineKeyboardBuilder()
    for store in STORES:
        kb.button(text=store, callback_data=f"store:{store}")
    return kb.adjust(1).as_markup()


def confirm_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data="confirm:yes")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:no")
    return kb.adjust(1).as_markup()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---

async def start_handler(message: Message):
    user_sessions[message.from_user.id] = {"photos": [], "store": None}
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞:", reply_markup=store_keyboard())


async def photo_handler(message: Message):
    session = user_sessions.get(message.from_user.id)
    if not session or not session.get("store"):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω –∫–æ–º–∞–Ω–¥–æ–π /start")
        return

    file_id = message.photo[-1].file_id
    file = await message.bot.get_file(file_id)
    file_path = file.file_path
    file_data = await message.bot.download_file(file_path)

    session["photos"].append(file_data.read())
    await message.answer("–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")


async def store_handler(callback: CallbackQuery):
    store_name = callback.data.split(":", 1)[1]
    user_sessions[callback.from_user.id] = {"photos": [], "store": store_name}
    await callback.message.answer(f"–ú–∞–≥–∞–∑–∏–Ω –≤—ã–±—Ä–∞–Ω: {store_name}\n–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–π —Ñ–æ—Ç–æ üì∏")
    await callback.answer()


async def confirm_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    session = user_sessions.get(user_id)

    if not session or not session.get("store") or not session.get("photos"):
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ ‚ùå")
        return

    store_name = session["store"]
    today = datetime.now().strftime("%Y-%m-%d")
    folder_path = f"{BASE_FOLDER}/{today}/{store_name}"

    create_folder(folder_path)

    for i, photo_data in enumerate(session["photos"], 1):
        filename = f"{store_name}_{today}_{i}.jpg"
        path = f"{folder_path}/{filename}"
        upload_file(path, photo_data)

    await callback.message.answer("–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ ‚úÖ")
    user_sessions.pop(user_id, None)


async def confirm_request(message: Message):
    await message.answer("–•–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å?", reply_markup=confirm_keyboard())


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher()

    dp.message.register(start_handler, F.text == "/start")
    dp.message.register(photo_handler, F.photo)
    dp.message.register(confirm_request, F.text.lower() == "–æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
    dp.callback_query.register(store_handler, F.data.startswith("store:"))
    dp.callback_query.register(confirm_handler, F.data.startswith("confirm:"))

    scheduler = AsyncIOScheduler(timezone=str(get_localzone()))
    scheduler.start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram...")
    dp.run_polling(bot)


if __name__ == "__main__":
    main()
