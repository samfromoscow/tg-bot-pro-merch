# bot.py ‚Äî –æ—Ç—á—ë—Ç—ã –±–µ–∑ —Å–ø–∞–º–∞, –Ω–µ–¥–µ–ª—è –ø–æ –ú–æ—Å–∫–≤–µ, admin: /status /addstore /delstore
import os
import re
import json
import asyncio
import logging
import requests
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, List, Tuple, Optional, Set

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    BotCommandScopeChat,
)
from aiogram.filters import Command

# ======= –¢–û–ö–ï–ù–´ =======
TELEGRAM_TOKEN = "8306801846:AAEvDQFoiepNmDaxPi5UVDqiNWmz6tUO_KQ"
YANDEX_TOKEN   = "y0__xCmksrUBxjjojogmLvAsxTMieHo_qAobIbgob8lZd-uDHpoew"

# ====== –ê–î–ú–ò–ù ======
ADMIN_ID = 445526501  # —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã /status /addstore /delstore –∏ –≤–∏–¥–Ω—ã –≤ –º–µ–Ω—é

# ====== –õ–û–ì–ò –ò –ë–û–¢ ======
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp  = Dispatcher()

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ======
SUMMARY_DELAY_SEC = 2.0  # –ø–∞—É–∑–∞ —Ç–∏—à–∏–Ω—ã –¥–ª—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏—è
MSK = timezone(timedelta(hours=3))  # –ú–æ—Å–∫–≤–∞

# ====== –§–∞–π–ª—ã/–¥–∞–Ω–Ω—ã–µ ======
STORES_FILE = "stores.json"

# –ù–∞—á–∞–ª—å–Ω–æ–µ ¬´—Å–µ–º—è¬ª –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –µ—â—ë –Ω–µ—Ç)
SEED_STORES: List[str] = [
    "–û–ë–ò 013 –ë–µ–ª–∞—è –¥–∞—á–∞",
    "–û–ë–ò 009 –í–∞—Ä—à–∞–≤–∫–∞",
    "–û–ë–ò 017 –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–û–ë–ò 006 –ë–æ—Ä–æ–≤–∫–∞",
    "–û–ë–ò 037 –ê–≤–∏–∞–ø–∞—Ä–∫",
    "–û–ë–ò 039 –ù–æ–≤–∞—è –†–∏–≥–∞",
    "–û–ë–ò 033 –†—è–∑–∞–Ω—å",
    "–û–ë–ò 023 –í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "–û–ë–ò 042 –ë—Ä—è–Ω—Å–∫",
    "–û–ë–ò 015 –ü–∞—Ä–Ω–∞—Å",
    "–û–ë–ò 001 –¢–µ–ø–ª—ã–π —Å—Ç–∞–Ω",
    "–û–ë–ò 011 –§–µ–¥—è–∫–æ–≤–æ",
    "–û–ë–ò 016 –õ–∞—Ö—Ç–∞",
    "–û–ë–ò 035 –ú–∏—Ç–∏–Ω–æ",
    "–û–ë–ò 108 –ö–∞–∑–∞–Ω—å",
]

# –ë–∞–∑–∞ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
YANDEX_BASE = "/Sam/–ü—Ä–æ–µ–∫—Ç Crown/–§–æ—Ç–æ–æ—Ç—á–µ—Ç—ã CROWN"

# –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
# user_id -> {"store": str, "files": List[str], "tmp_dir": str,
#             "status_msg": Optional[Tuple[int,int]], "summary_task": Optional[asyncio.Task],
#             "mode": Optional[str]}
user_sessions: Dict[int, Dict[str, Any]] = {}

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–∞–º—è—Ç—å –æ–± –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö –∑–∞ –Ω–µ–¥–µ–ª—é (fallback)
# submitted_by_week["DD.MM-DD.MM"] = set(store_names)
submitted_by_week: Dict[str, Set[str]] = {}

# ===================== –•–†–ê–ù–ò–õ–ò–©–ï –ú–ê–ì–ê–ó–ò–ù–û–í =====================
def load_stores() -> List[str]:
    if not os.path.exists(STORES_FILE):
        with open(STORES_FILE, "w", encoding="utf-8") as f:
            json.dump(SEED_STORES, f, ensure_ascii=False, indent=2)
        logging.info("stores.json created with seed list (%d)", len(SEED_STORES))
        return list(SEED_STORES)
    try:
        with open(STORES_FILE, "r", encoding="utf-8") as f:
            stores = json.load(f)
            if not isinstance(stores, list):
                raise ValueError("stores.json damaged")
            return stores
    except Exception as e:
        logging.exception("load_stores error, fallback to seed: %s", e)
        return list(SEED_STORES)

def save_stores(stores: List[str]) -> None:
    with open(STORES_FILE, "w", encoding="utf-8") as f:
        json.dump(stores, f, ensure_ascii=False, indent=2)

def normalize_name(name: str) -> str:
    return re.sub(r"\s+", " ", name.strip())

def is_store_name_valid(name: str) -> bool:
    # –¢—Ä–µ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç: "–û–ë–ò 123 –ù–∞–∑–≤–∞–Ω–∏–µ"
    return bool(re.match(r"^–û–ë–ò\s+\d{3}\s+.+", name.strip(), flags=re.IGNORECASE))

# ====== –£–¢–ò–õ–ò–¢–´ (Yandex) ======
def ensure_folder_exists(folder_path: str) -> bool:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources"
    params = {"path": folder_path}
    try:
        r = requests.put(url, headers=headers, params=params, timeout=30)
        return r.status_code in (201, 409)
    except Exception:
        logging.exception("ensure_folder_exists error")
        return False

def upload_to_yandex(local_file: str, remote_path: str) -> bool:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {"path": remote_path, "overwrite": "true"}
    try:
        resp = requests.get(url, headers=headers, params=params, timeout=30)
        if resp.status_code != 200:
            logging.error("Get upload href failed %s %s", resp.status_code, resp.text)
            return False
        upload_url = resp.json().get("href")
        if not upload_url:
            logging.error("No href in response")
            return False
        with open(local_file, "rb") as f:
            r = requests.put(upload_url, files={"file": f}, timeout=120)
        return r.status_code in (201, 202)
    except Exception:
        logging.exception("upload_to_yandex error")
        return False

def list_folder_children(folder_path: str) -> List[str]:
    """–í–µ—Ä–Ω—É—Ç—å –∏–º–µ–Ω–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫ –Ω–∞ –Ø.–î–∏—Å–∫–µ –¥–ª—è week_path."""
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources"
    params = {
        "path": folder_path,
        "limit": 1000,
        "fields": "_embedded.items.name,_embedded.items.type"
    }
    try:
        r = requests.get(url, headers=headers, params=params, timeout=30)
        if r.status_code != 200:
            logging.warning("list_folder_children %s -> %s %s", folder_path, r.status_code, r.text)
            return []
        items = r.json().get("_embedded", {}).get("items", [])
        return [it.get("name") for it in items if it.get("type") == "dir"]
    except Exception:
        logging.exception("list_folder_children error")
        return []

def get_week_folder(now: Optional[datetime] = None) -> str:
    if now is None:
        now = datetime.now(MSK)
    else:
        now = now.astimezone(MSK)
    start = (now - timedelta(days=now.weekday())).replace(hour=0, minute=0, second=0, microsecond=0)
    end = (start + timedelta(days=6)).replace(hour=23, minute=59, second=59, microsecond=0)
    return f"{start.day:02}.{start.month:02}-{end.day:02}.{end.month:02}"

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======
def build_stores_keyboard(stores: Optional[List[str]] = None) -> InlineKeyboardMarkup:
    if stores is None:
        stores = load_stores()

    def store_key(s: str) -> int:
        nums = re.findall(r"\d+", s)
        return int(nums[-1]) if nums else 0

    sorted_stores = sorted(stores, key=store_key)
    buttons = [InlineKeyboardButton(text=s, callback_data=f"store:{i}") for i, s in enumerate(sorted_stores)]
    rows = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_send_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="confirm_upload")]
    ])

def build_cancel_kb(tag: str) -> InlineKeyboardMarkup:
    # tag –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –æ—Ç–º–µ–Ω—ã —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_cancel:{tag}")]
    ])

def build_del_list_kb(stores: List[str]) -> InlineKeyboardMarkup:
    # —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    buttons = [InlineKeyboardButton(text=s, callback_data=f"delpick:{i}") for i, s in enumerate(stores)]
    rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    rows.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel:del")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_del_confirm_kb(index: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"delyes:{index}"),
            InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="delback")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel:del")]
    ])

# ====== –•–≠–õ–ü–ï–†–´ –°–ï–°–°–ò–ô ======
def set_mode(user_id: int, mode: Optional[str]):
    user_sessions.setdefault(user_id, {})
    user_sessions[user_id]["mode"] = mode

def get_mode(user_id: int) -> Optional[str]:
    return user_sessions.get(user_id, {}).get("mode")

async def schedule_summary_message(message: Message, user_id: int):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑ –û–î–ù–û–ì–û —Å—Ç–∞—Ç—É—Å-—Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–∞—É–∑—ã SUMMARY_DELAY_SEC."""
    session = user_sessions.setdefault(user_id, {})

    # –æ—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    task: Optional[asyncio.Task] = session.get("summary_task")
    if task and not task.done():
        task.cancel()
        try:
            await task
        except Exception:
            pass

    async def delayed():
        try:
            await asyncio.sleep(SUMMARY_DELAY_SEC)
            sess = user_sessions.get(user_id)
            if not sess:
                return
            total = len(sess.get("files", []))
            text = (
                f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ  –í—Å–µ–≥–æ: {total} —à—Ç.\n\n"
                f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç."
            )
            kb = build_send_keyboard()
            if sess.get("status_msg"):
                chat_id, msg_id = sess["status_msg"]
                try:
                    await bot.edit_message_text(text=text, chat_id=chat_id, message_id=msg_id, reply_markup=kb)
                except Exception:
                    sent = await message.answer(text, reply_markup=kb)
                    sess["status_msg"] = (sent.chat.id, sent.message_id)
            else:
                sent = await message.answer(text, reply_markup=kb)
                sess["status_msg"] = (sent.chat.id, sent.message_id)
        except asyncio.CancelledError:
            return

    session["summary_task"] = asyncio.create_task(delayed())

def clear_summary_task(session: Dict[str, Any]):
    task: Optional[asyncio.Task] = session.get("summary_task")
    if task and not task.done():
        task.cancel()

# ====== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ======
@dp.message(Command("otchet"))
async def cmd_report(message: Message):
    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–∞—Ö–æ–¥–∏–ª—Å—è –≤ —Ä–µ–∂–∏–º–∞—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å
    set_mode(message.from_user.id, None)
    # –Ω–æ–≤–∞—è —á–∏—Å—Ç–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –æ—Ç—á—ë—Ç–∞
    user_sessions[message.from_user.id] = {
        "files": [],
        "tmp_dir": os.path.join("tmp_reports", str(message.from_user.id)),
        "status_msg": None,
        "summary_task": None,
    }
    os.makedirs(user_sessions[message.from_user.id]["tmp_dir"], exist_ok=True)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω (–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É):", reply_markup=build_stores_keyboard())

# ====== –í–´–ë–û–† –ú–ê–ì–ê–ó–ò–ù–ê ======
@dp.callback_query(lambda c: c.data and c.data.startswith("store:"))
async def process_store_choice(cq: CallbackQuery):
    await cq.answer()
    user_id = cq.from_user.id
    stores = load_stores()

    # –≤ callback —Ö—Ä–∞–Ω–∏—Ç—Å—è –∏–Ω–¥–µ–∫—Å –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë–º —Ç–æ—Ç –∂–µ –ø–æ—Ä—è–¥–æ–∫
    def store_key(s: str) -> int:
        nums = re.findall(r"\d+", s)
        return int(nums[-1]) if nums else 0
    sorted_stores = sorted(stores, key=store_key)

    idx = int(cq.data.split(":", 1)[1])
    if idx < 0 or idx >= len(sorted_stores):
        await cq.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑: /otchet")
        return

    store = sorted_stores[idx]

    user_sessions.setdefault(user_id, {})
    user_sessions[user_id]["store"] = store
    await cq.message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.\n–ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç¬ª.")

@dp.callback_query(lambda c: c.data == "cancel")
async def on_cancel(cq: CallbackQuery):
    await cq.answer()
    sess = user_sessions.pop(cq.from_user.id, None)
    if sess:
        clear_summary_task(sess)
    set_mode(cq.from_user.id, None)
    await cq.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /otchet")

# ====== –§–û–¢–û: –±–µ–∑ —Å–ø–∞–º–∞, —Å—Ç–∞—Ç—É—Å –ø–æ —Ç–∞–π–º–µ—Ä—É —Ç–∏—à–∏–Ω—ã ======
@dp.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    # —Ñ–æ—Ç–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º–æ–≤
    session = user_sessions.get(user_id)
    if not session or "store" not in session:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /otchet –∏ –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω.")
        return

    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    ts = datetime.now(MSK).strftime("%Y-%m-%d_%H-%M-%S")
    local_filename = os.path.join(session["tmp_dir"], f"{ts}_{photo.file_id}.jpg")
    await bot.download_file(file_info.file_path, destination=local_filename)
    session.setdefault("files", []).append(local_filename)

    await schedule_summary_message(message, user_id)

# ====== –û–¢–ü–†–ê–í–ò–¢–¨ –û–¢–ß–Å–¢ ======
@dp.callback_query(lambda c: c.data == "confirm_upload")
async def on_confirm_upload(cq: CallbackQuery):
    await cq.answer()
    user_id = cq.from_user.id
    session = user_sessions.get(user_id)
    if not session or not session.get("files") or "store" not in session:
        await cq.message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ /otchet.")
        return

    clear_summary_task(session)
    if session.get("status_msg"):
        chat_id, msg_id = session["status_msg"]
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
        session["status_msg"] = None

    loading = await cq.message.answer("–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    store = session["store"]
    files = list(session["files"])
    week_folder = get_week_folder()
    base = YANDEX_BASE
    week_path = f"{base}/{week_folder}"
    store_path = f"{week_path}/{store}"

    def do_upload():
        ensure_folder_exists(base)
        ensure_folder_exists(week_path)
        ensure_folder_exists(store_path)
        uploaded = 0
        for local_file in files:
            remote_path = f"{store_path}/{os.path.basename(local_file)}"
            if upload_to_yandex(local_file, remote_path):
                uploaded += 1
                try:
                    os.remove(local_file)
                except Exception:
                    pass
        # —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        try:
            tmpdir = session.get("tmp_dir")
            if tmpdir and os.path.isdir(tmpdir) and not os.listdir(tmpdir):
                os.rmdir(tmpdir)
        except Exception:
            pass
        return uploaded, len(files)

    loop = asyncio.get_event_loop()
    uploaded, total = await loop.run_in_executor(None, do_upload)

    if uploaded > 0:
        submitted_by_week.setdefault(week_folder, set()).add(store)

    try:
        await bot.delete_message(loading.chat.id, loading.message_id)
    except Exception:
        pass

    final_text = (
        f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded} –∏–∑ {total}.\n"
        f"–ü–∞–ø–∫–∞: {store_path}"
    )
    await cq.message.answer(final_text)

    user_sessions.pop(user_id, None)

# ===================== –ê–î–ú–ò–ù: /status =====================
@dp.message(Command("status"))
async def cmd_status(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    week = get_week_folder()
    week_path = f"{YANDEX_BASE}/{week}"

    existing_dirs = set(list_folder_children(week_path))
    if not existing_dirs:
        existing_dirs = submitted_by_week.get(week, set())

    all_stores = load_stores()
    total = len(all_stores)
    done = sorted([s for s in all_stores if s in existing_dirs])
    missing = sorted([s for s in all_stores if s not in existing_dirs])

    lines = [f"üìÜ –ù–µ–¥–µ–ª—è: {week}", f"‚úÖ –û—Ç—á—ë—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(done)} / {total}"]
    if missing:
        lines.append("\n‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏:")
        lines += [f"‚Ä¢ {s}" for s in missing]
    else:
        lines.append("\nüéâ –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –æ—Ç—á—ë—Ç!")

    await message.answer("\n".join(lines))

# ===================== –ê–î–ú–ò–ù: /addstore =====================
@dp.message(Command("addstore"))
async def cmd_addstore(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    set_mode(ADMIN_ID, "adding")
    await message.answer(
        "–ü—Ä–∏—à–ª–∏—Ç–µ **–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π**.\n"
        "–§–æ—Ä–º–∞—Ç: `–û–ë–ò 034 –°–∞—Ä–∞—Ç–æ–≤` (—Å—Ç—Ä–æ–≥–æ —Å –Ω–æ–º–µ—Ä–æ–º –º–∞–≥–∞–∑–∏–Ω–∞).",
        reply_markup=build_cancel_kb("add"),
    )

@dp.callback_query(lambda c: c.data == "admin_cancel:add")
async def cancel_add(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    set_mode(ADMIN_ID, None)
    await cq.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

@dp.message(lambda m: get_mode(m.from_user.id) == "adding")
async def addstore_text(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    text = normalize_name(message.text or "")
    # –∑–∞–ø—Ä–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –∑–∞–ø–∏—Å–∞—Ç—å /delstore –∫–∞–∫ –º–∞–≥–∞–∑–∏–Ω
    if text.startswith("/"):
        await message.answer("–≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É. –ü—Ä–∏—à–ª–∏—Ç–µ –∏–º–µ–Ω–Ω–æ **–Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞**.\n–ù–∞–ø—Ä–∏–º–µ—Ä: `–û–ë–ò 034 –°–∞—Ä–∞—Ç–æ–≤`")
        return
    if not is_store_name_valid(text):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: `–û–ë–ò 034 –°–∞—Ä–∞—Ç–æ–≤`")
        return

    stores = load_stores()
    lower_set = {s.lower() for s in stores}
    if text.lower() in lower_set:
        await message.answer("–¢–∞–∫–æ–π –º–∞–≥–∞–∑–∏–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        set_mode(ADMIN_ID, None)
        return

    stores.append(text)
    save_stores(stores)
    set_mode(ADMIN_ID, None)
    await message.answer(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: {text}")

# ===================== –ê–î–ú–ò–ù: /delstore =====================
@dp.message(Command("delstore"))
async def cmd_delstore(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    set_mode(ADMIN_ID, "deleting")
    stores = load_stores()
    if not stores:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        set_mode(ADMIN_ID, None)
        return

    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=build_del_list_kb(stores)
    )

@dp.callback_query(lambda c: c.data.startswith("delpick:"))
async def on_del_pick(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    if get_mode(ADMIN_ID) != "deleting":
        await cq.answer("–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω.")
        return

    stores = load_stores()
    idx = int(cq.data.split(":")[1])
    if idx < 0 or idx >= len(stores):
        await cq.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await cq.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω?\n\n‚Ä¢ {stores[idx]}",
        reply_markup=build_del_confirm_kb(idx)
    )

@dp.callback_query(lambda c: c.data == "delback")
async def on_del_back(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    if get_mode(ADMIN_ID) != "deleting":
        await cq.answer()
        return
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=build_del_list_kb(load_stores()))

@dp.callback_query(lambda c: c.data.startswith("delyes:"))
async def on_del_yes(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    if get_mode(ADMIN_ID) != "deleting":
        await cq.answer()
        return

    stores = load_stores()
    idx = int(cq.data.split(":")[1])
    if idx < 0 or idx >= len(stores):
        await cq.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    removed = stores.pop(idx)
    save_stores(stores)
    # –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –µ—â—ë), –ª–∏–±–æ –≤—ã–π—Ç–∏ ‚Äî –Ω–∞ –≤–∞—à –≤–∫—É—Å
    if stores:
        await cq.message.edit_text(
            f"üóë –£–¥–∞–ª–µ–Ω–æ: {removed}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=build_del_list_kb(stores)
        )
    else:
        set_mode(ADMIN_ID, None)
        await cq.message.edit_text(f"üóë –£–¥–∞–ª–µ–Ω–æ: {removed}\n\n–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—É—Å—Ç.")

@dp.callback_query(lambda c: c.data == "admin_cancel:del")
async def cancel_del(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer()
        return
    set_mode(ADMIN_ID, None)
    await cq.message.edit_text("–£–¥–∞–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# ====== on_startup: –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞ (–Ω–µ —Ç—Ä–æ–≥–∞–µ–º –º–µ–Ω—é –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤) ======
async def on_startup(bot: Bot):
    try:
        await bot.set_my_commands(
            commands=[
                BotCommand(command="otchet", description="–ù–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç"),
                BotCommand(command="status", description="–°—Ç–∞—Ç—É—Å –æ—Ç—á—ë—Ç–æ–≤"),
                BotCommand(command="addstore", description="–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
                BotCommand(command="delstore", description="–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
            ],
            scope=BotCommandScopeChat(chat_id=ADMIN_ID),
        )
    except Exception as e:
        logging.warning("Can't set admin-only menu: %s", e)

dp.startup.register(on_startup)

# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram...")
    dp.run_polling(bot)
