# bot.py ‚Äî –æ—Ç—á—ë—Ç—ã, –Ω–µ–¥–µ–ª—è –ø–æ –ú–°–ö, –±–µ–∑ —Å–ø–∞–º–∞; –∞–¥–º–∏–Ω: /status /addstore /delstore
import os
import re
import json
import asyncio
import logging
import requests
from datetime import datetime, timedelta
from typing import Dict, Any, List, Tuple, Optional, Set

from aiogram import Bot, Dispatcher, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BotCommand,
    BotCommandScopeChat,
    BotCommandScopeDefault,
)
from aiogram.filters import Command

# Py3.8: backports.zoneinfo
try:
    from zoneinfo import ZoneInfo  # Py>=3.9
except Exception:
    from backports.zoneinfo import ZoneInfo  # Py3.8

# ======= –¢–û–ö–ï–ù–´ =======
TELEGRAM_TOKEN = "8306801846:AAEvDQFoiepNmDaxPi5UVDqiNWmz6tUO_KQ"
YANDEX_TOKEN   = "y0__xCmksrUBxjjojogmLvAsxTMieHo_qAobIbgob8lZd-uDHpoew"

# ====== –ê–î–ú–ò–ù ======
ADMIN_ID = 445526501  # —Ç–æ–ª—å–∫–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã

# ====== –õ–û–ì–ò –ò –ë–û–¢ ======
logging.basicConfig(level=logging.INFO)
bot = Bot(token=TELEGRAM_TOKEN)
dp  = Dispatcher()

# ====== –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ======
SUMMARY_DELAY_SEC = 2.0  # –ø–∞—É–∑–∞ —Ç–∏—à–∏–Ω—ã –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
MSK_TZ = ZoneInfo("Europe/Moscow")

# ====== –•—Ä–∞–Ω–∏–ª–∏—â–µ –º–∞–≥–∞–∑–∏–Ω–æ–≤ ======
STORES_FILE = "stores.json"
DEFAULT_STORES: List[str] = [
    "–û–ë–ò 013 –ë–µ–ª–∞—è –¥–∞—á–∞",
    "–û–ë–ò 009 –í–∞—Ä—à–∞–≤–∫–∞",
    "–û–ë–ò 017 –ù–æ–≤–≥–æ—Ä–æ–¥",
    "–û–ë–ò 006 –ë–æ—Ä–æ–≤–∫–∞",
    "–û–ë–ò 037 –ê–≤–∏–∞–ø–∞—Ä–∫",
    "–û–ë–ò 039 –ù–æ–≤–∞—è –†–∏–≥–∞",
    "–û–ë–ò 033 –†—è–∑–∞–Ω—å",
    "–û–ë–ò 023 –í–æ–ª–≥–æ–≥—Ä–∞–¥",
    "–û–ë–ò 042 –ë—Ä—è–Ω—Å–∫",
    "–û–ë–ò 015 –ü–∞—Ä–Ω–∞—Å",
    "–û–ë–ò 001 –¢–µ–ø–ª—ã–π —Å—Ç–∞–Ω",
    "–û–ë–ò 011 –§–µ–¥—è–∫–æ–≤–æ",
    "–û–ë–ò 016 –õ–∞—Ö—Ç–∞",
    "–û–ë–ò 035 –ú–∏—Ç–∏–Ω–æ",
    "–û–ë–ò 108 –ö–∞–∑–∞–Ω—å",
]

def load_stores() -> List[str]:
    if os.path.exists(STORES_FILE):
        try:
            with open(STORES_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
            if isinstance(data, list):
                return list(dict.fromkeys([str(x).strip() for x in data if str(x).strip()]))
        except Exception:
            logging.exception("Failed to read stores.json, fallback to default.")
    # —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
    with open(STORES_FILE, "w", encoding="utf-8") as f:
        json.dump(DEFAULT_STORES, f, ensure_ascii=False, indent=2)
    logging.info("stores.json created with seed list (%d)", len(DEFAULT_STORES))
    return DEFAULT_STORES[:]

def save_stores(stores: List[str]) -> None:
    # —É–Ω–∏–∫–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –Ω–æ–º–µ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
    def store_key(s: str) -> Tuple[int, str]:
        nums = re.findall(r"\d+", s)
        num = int(nums[-1]) if nums else 10**9
        return (num, s.lower())
    clean = [s.strip() for s in stores if s and s.strip()]
    unique = list(dict.fromkeys(clean))
    unique_sorted = sorted(unique, key=store_key)
    with open(STORES_FILE, "w", encoding="utf-8") as f:
        json.dump(unique_sorted, f, ensure_ascii=False, indent=2)

STORES: List[str] = load_stores()

# –ë–∞–∑–∞ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ
YANDEX_BASE = "/Sam/–ü—Ä–æ–µ–∫—Ç Crown/–§–æ—Ç–æ–æ—Ç—á–µ—Ç—ã CROWN"

# –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# user_id -> {"store": str, "files": List[str], "tmp_dir": str,
#             "status_msg": Optional[Tuple[int,int]], "summary_task": Optional[asyncio.Task]}
user_sessions: Dict[int, Dict[str, Any]] = {}

# –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –ø–∞–º—è—Ç—å –æ–± –æ—Ç–ø—Ä–∞–≤–∏–≤—à–∏—Ö –∑–∞ –Ω–µ–¥–µ–ª—é (–µ—Å–ª–∏ API –ª–∏—Å—Ç–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
# submitted_by_week["DD.MM-DD.MM"] = set(store_names)
submitted_by_week: Dict[str, Set[str]] = {}

# –ü—Ä–æ—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
admin_state: Dict[int, str] = {}  # {ADMIN_ID: "await_add_name"}

# ====== –£–¢–ò–õ–ò–¢–´ (Yandex) ======
def ensure_folder_exists(folder_path: str) -> bool:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources"
    params = {"path": folder_path}
    try:
        r = requests.put(url, headers=headers, params=params, timeout=30)
        return r.status_code in (201, 409)
    except Exception:
        logging.exception("ensure_folder_exists error")
        return False

def upload_to_yandex(local_file: str, remote_path: str) -> bool:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources/upload"
    params = {"path": remote_path, "overwrite": "true"}
    try:
        resp = requests.get(url, headers=headers, params=params, timeout=30)
        if resp.status_code != 200:
            logging.error("Get upload href failed %s %s", resp.status_code, resp.text)
            return False
        upload_url = resp.json().get("href")
        if not upload_url:
            logging.error("No href in response")
            return False
        with open(local_file, "rb") as f:
            r = requests.put(upload_url, files={"file": f}, timeout=120)
        return r.status_code in (201, 202)
    except Exception:
        logging.exception("upload_to_yandex error")
        return False

def list_folder_children(folder_path: str) -> List[str]:
    headers = {"Authorization": f"OAuth {YANDEX_TOKEN}"}
    url = "https://cloud-api.yandex.net/v1/disk/resources"
    params = {
        "path": folder_path,
        "limit": 1000,
        "fields": "_embedded.items.name,_embedded.items.type"
    }
    try:
        r = requests.get(url, headers=headers, params=params, timeout=30)
        if r.status_code != 200:
            logging.warning("list_folder_children %s -> %s %s", folder_path, r.status_code, r.text)
            return []
        data = r.json()
        items = data.get("_embedded", {}).get("items", [])
        return [it.get("name") for it in items if it.get("type") == "dir"]
    except Exception:
        logging.exception("list_folder_children error")
        return []

def now_msk() -> datetime:
    return datetime.now(MSK_TZ)

def get_week_folder(now: Optional[datetime] = None) -> str:
    if now is None:
        now = now_msk()
    start = (now - timedelta(days=now.weekday())).date()
    end = (start + timedelta(days=6))
    return f"{start.day:02}.{start.month:02}-{end.day:02}.{end.month:02}"

# ====== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======
def build_stores_keyboard() -> InlineKeyboardMarkup:
    def store_key(s: str) -> int:
        nums = re.findall(r"\d+", s)
        return int(nums[-1]) if nums else 0
    sorted_stores = sorted(STORES, key=store_key)
    buttons = [InlineKeyboardButton(text=s, callback_data=f"store:{i}") for i, s in enumerate(sorted_stores)]
    # —Å–æ—Ö—Ä–∞–Ω–∏–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∫ —Ç–µ–∫—É—â–µ–º—É –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    # (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –∏–∑ STORES –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)
    rows = [buttons[i:i+3] for i in range(0, len(buttons), 3)]
    rows.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_send_keyboard() -> InlineKeyboardMarkup:
    btn = InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="confirm_upload")
    return InlineKeyboardMarkup(inline_keyboard=[[btn]])

def build_delete_list_keyboard() -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ (–ø–æ –∏–Ω–¥–µ–∫—Å–∞–º —Ç–µ–∫—É—â–µ–≥–æ STORES, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–∫ –≤ –≤—ã–±–æ—Ä–µ)
    def store_key(s: str) -> int:
        nums = re.findall(r"\d+", s)
        return int(nums[-1]) if nums else 0
    sorted_idx = sorted(range(len(STORES)), key=lambda k: store_key(STORES[k]))
    buttons = [
        InlineKeyboardButton(text=STORES[i], callback_data=f"askdel:{i}")
        for i in sorted_idx
    ]
    rows = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
    rows.append([InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="del_cancel")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def build_confirm_delete_keyboard(idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delok:{idx}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="del_back")]
    ])

# ====== –•–≠–õ–ü–ï–†–´ (—Å—Ç–∞—Ç—É—Å) ======
async def schedule_summary_message(message: Message, user_id: int):
    session = user_sessions.get(user_id)
    if not session:
        return
    task: Optional[asyncio.Task] = session.get("summary_task")
    if task and not task.done():
        task.cancel()
        try:
            await task
        except Exception:
            pass

    async def delayed():
        try:
            await asyncio.sleep(SUMMARY_DELAY_SEC)
            sess = user_sessions.get(user_id)
            if not sess:
                return
            total = len(sess["files"])
            text = (
                f"–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ ‚úÖ  –í—Å–µ–≥–æ: {total} —à—Ç.\n\n"
                f"–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç."
            )
            kb = build_send_keyboard()
            if sess.get("status_msg"):
                chat_id, msg_id = sess["status_msg"]
                try:
                    await bot.edit_message_text(text=text, chat_id=chat_id, message_id=msg_id, reply_markup=kb)
                except Exception:
                    sent = await message.answer(text, reply_markup=kb)
                    sess["status_msg"] = (sent.chat.id, sent.message_id)
            else:
                sent = await message.answer(text, reply_markup=kb)
                sess["status_msg"] = (sent.chat.id, sent.message_id)
        except asyncio.CancelledError:
            return

    session["summary_task"] = asyncio.create_task(delayed())

def clear_summary_task(session: Dict[str, Any]):
    task: Optional[asyncio.Task] = session.get("summary_task")
    if task and not task.done():
        task.cancel()

# ====== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–°–ï–• ======
@dp.message(Command("otchet"))
async def cmd_report(message: Message):
    # –Ω–æ–≤–∞—è —á–∏—Å—Ç–∞—è —Å–µ—Å—Å–∏—è
    user_sessions.pop(message.from_user.id, None)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω (–Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É):", reply_markup=build_stores_keyboard())

# ====== –í–´–ë–û–† –ú–ê–ì–ê–ó–ò–ù–ê ======
@dp.callback_query(lambda c: c.data and c.data.startswith("store:"))
async def process_store_choice(cq: CallbackQuery):
    await cq.answer()
    user_id = cq.from_user.id
    # –∏–Ω–¥–µ–∫—Å –º–∞–≥–∞–∑–∏–Ω–∞ –∏–∑ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    try:
        idx_in_sorted = int(cq.data.split(":", 1)[1])
    except Exception:
        await cq.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /otchet –µ—â—ë —Ä–∞–∑.")
        return

    # –ø–µ—Ä–µ—Å–æ–±–µ—Ä—ë–º —Ç–∞–∫–æ–π –∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    def store_key(s: str) -> int:
        nums = re.findall(r"\d+", s)
        return int(nums[-1]) if nums else 0
    sorted_stores = sorted(STORES, key=store_key)
    if idx_in_sorted < 0 or idx_in_sorted >= len(sorted_stores):
        await cq.message.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /otchet —Å–Ω–æ–≤–∞.")
        return
    store = sorted_stores[idx_in_sorted]

    tmp_dir = os.path.join("tmp_reports", str(user_id))
    os.makedirs(tmp_dir, exist_ok=True)

    user_sessions[user_id] = {
        "store": store,
        "files": [],
        "tmp_dir": tmp_dir,
        "status_msg": None,        # (chat_id, message_id)
        "summary_task": None,      # asyncio.Task
    }

    await cq.message.answer(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.\n–ü–æ—Å–ª–µ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç¬ª."
    )

@dp.callback_query(lambda c: c.data == "cancel")
async def on_cancel(cq: CallbackQuery):
    await cq.answer()
    sess = user_sessions.pop(cq.from_user.id, None)
    if sess:
        clear_summary_task(sess)
    await cq.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ: /otchet")

# ====== –ü–†–ò–Å–ú –§–û–¢–û (–±–µ–∑ —Å–ø–∞–º–∞) ======
@dp.message(F.photo)
async def handle_photo(message: Message):
    user_id = message.from_user.id
    session = user_sessions.get(user_id)
    if not session:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /otchet –∏ –≤—ã–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω.")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo = message.photo[-1]
    file_info = await bot.get_file(photo.file_id)
    ts = now_msk().strftime("%Y-%m-%d_%H-%M-%S")
    local_filename = os.path.join(session["tmp_dir"], f"{ts}_{photo.file_id}.jpg")
    await bot.download_file(file_info.file_path, destination=local_filename)
    session["files"].append(local_filename)

    # –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–¥–∏–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    await schedule_summary_message(message, user_id)

# ====== –ó–ê–ì–†–£–ó–ö–ê –ù–ê –î–ò–°–ö ======
@dp.callback_query(lambda c: c.data == "confirm_upload")
async def on_confirm_upload(cq: CallbackQuery):
    await cq.answer()
    user_id = cq.from_user.id
    session = user_sessions.get(user_id)
    if not session or not session.get("files"):
        await cq.message.answer("–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–∑–æ–≤–∏—Ç–µ /otchet.")
        return

    clear_summary_task(session)
    if session.get("status_msg"):
        chat_id, msg_id = session["status_msg"]
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
        session["status_msg"] = None

    loading = await cq.message.answer("–ò–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á—ë—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

    store = session["store"]
    files = list(session["files"])
    week_folder = get_week_folder()
    base = YANDEX_BASE
    week_path = f"{base}/{week_folder}"
    store_path = f"{week_path}/{store}"

    def do_upload():
        ensure_folder_exists(base)
        ensure_folder_exists(week_path)
        ensure_folder_exists(store_path)
        uploaded = 0
        for local_file in files:
            remote_path = f"{store_path}/{os.path.basename(local_file)}"
            if upload_to_yandex(local_file, remote_path):
                uploaded += 1
                try:
                    os.remove(local_file)
                except Exception:
                    pass
        # —É–¥–∞–ª–∏—Ç—å –ø—É—Å—Ç—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        try:
            tmpdir = session.get("tmp_dir")
            if tmpdir and os.path.isdir(tmpdir) and not os.listdir(tmpdir):
                os.rmdir(tmpdir)
        except Exception:
            pass
        return uploaded, len(files)

    loop = asyncio.get_event_loop()  # Py3.8 —Å–æ–≤–º–µ—Å—Ç–∏–º–æ
    uploaded, total = await loop.run_in_executor(None, do_upload)

    if uploaded > 0:
        submitted_by_week.setdefault(week_folder, set()).add(store)

    try:
        await bot.delete_message(loading.chat.id, loading.message_id)
    except Exception:
        pass

    final_text = (
        f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {uploaded} –∏–∑ {total}.\n"
        f"–ü–∞–ø–∫–∞: {store_path}"
    )
    await cq.message.answer(final_text)

    user_sessions.pop(user_id, None)

# ====== –ê–î–ú–ò–ù /status ======
@dp.message(Command("status"))
async def cmd_status(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return

    week = get_week_folder()
    week_path = f"{YANDEX_BASE}/{week}"
    existing_dirs = set(list_folder_children(week_path)) or submitted_by_week.get(week, set())

    total = len(STORES)
    done = sorted([s for s in STORES if s in existing_dirs])
    missing = sorted([s for s in STORES if s not in existing_dirs])

    text_lines = [
        f"üìÜ –ù–µ–¥–µ–ª—è: {week} (–ú–°–ö)",
        f"‚úÖ –û—Ç—á—ë—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: {len(done)} / {total}",
    ]
    if missing:
        text_lines.append("\n‚ùå –ù–µ –ø—Ä–∏—Å–ª–∞–ª–∏:")
        for s in missing:
            text_lines.append(f"‚Ä¢ {s}")
    else:
        text_lines.append("\nüéâ –í—Å–µ –º–∞–≥–∞–∑–∏–Ω—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –æ—Ç—á—ë—Ç!")

    await message.answer("\n".join(text_lines))

# ====== –ê–î–ú–ò–ù /addstore (–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ) ======
@dp.message(Command("addstore"))
async def cmd_addstore(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    admin_state[ADMIN_ID] = "await_add_name"
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–û–ë–ò 034 –°–∞—Ä–∞—Ç–æ–≤¬ª.\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )

@dp.message(Command("cancel"))
async def cmd_cancel_admin(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    if admin_state.get(ADMIN_ID) == "await_add_name":
        admin_state.pop(ADMIN_ID, None)
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await message.answer("–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å.")

@dp.message(F.text)
async def handle_admin_add_name(message: Message):
    # –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    if message.from_user.id != ADMIN_ID:
        return
    if admin_state.get(ADMIN_ID) != "await_add_name":
        return

    name = message.text.strip()
    if not name:
        await message.answer("–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ /cancel.")
        return
    if name in STORES:
        await message.answer("–¢–∞–∫–æ–π –º–∞–≥–∞–∑–∏–Ω —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.")
        admin_state.pop(ADMIN_ID, None)
        return

    STORES.append(name)
    save_stores(STORES)
    admin_state.pop(ADMIN_ID, None)
    await message.answer(f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω: {name}")

# ====== –ê–î–ú–ò–ù /delstore (—Å–ø–∏—Å–∫–æ–º) ======
@dp.message(Command("delstore"))
async def cmd_delstore(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    if not STORES:
        await message.answer("–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—É—Å—Ç.")
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=build_delete_list_keyboard())

@dp.callback_query(lambda c: c.data and c.data.startswith("askdel:"))
async def cb_ask_delete(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    try:
        idx = int(cq.data.split(":", 1)[1])
    except Exception:
        await cq.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞.")
        return
    if idx < 0 or idx >= len(STORES):
        await cq.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    name = STORES[idx]
    await cq.message.edit_text(
        f"–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω?\n\nüóë {name}",
        reply_markup=build_confirm_delete_keyboard(idx)
    )

@dp.callback_query(lambda c: c.data and c.data.startswith("delok:"))
async def cb_delete_ok(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    try:
        idx = int(cq.data.split(":", 1)[1])
    except Exception:
        await cq.answer("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞.")
        return
    if idx < 0 or idx >= len(STORES):
        await cq.answer("–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    name = STORES[idx]
    # —É–¥–∞–ª—è–µ–º
    del STORES[idx]
    save_stores(STORES)
    await cq.message.edit_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {name}")

@dp.callback_query(lambda c: c.data == "del_back")
async def cb_delete_back(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=build_delete_list_keyboard())

@dp.callback_query(lambda c: c.data == "del_cancel")
async def cb_delete_cancel(cq: CallbackQuery):
    if cq.from_user.id != ADMIN_ID:
        await cq.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    await cq.message.edit_text("–ó–∞–∫—Ä—ã—Ç–æ.")

# ====== on_startup: –º–µ–Ω—é ======
async def on_startup(bot: Bot):
    # –º–µ–Ω—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¥–ª—è –≤—Å–µ—Ö): —Ç–æ–ª—å–∫–æ /otchet
    try:
        await bot.set_my_commands(
            commands=[BotCommand(command="otchet", description="–ù–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç")],
            scope=BotCommandScopeDefault(),
        )
    except Exception as e:
        logging.warning("Can't set default menu: %s", e)
    # –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
    try:
        await bot.set_my_commands(
            commands=[
                BotCommand(command="otchet",    description="–ù–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç"),
                BotCommand(command="status",    description="–°—Ç–∞—Ç—É—Å –æ—Ç—á—ë—Ç–æ–≤"),
                BotCommand(command="addstore",  description="–î–æ–±–∞–≤–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
                BotCommand(command="delstore",  description="–£–¥–∞–ª–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω"),
            ],
            scope=BotCommandScopeChat(chat_id=ADMIN_ID),
        )
    except Exception as e:
        logging.warning("Can't set admin-only menu: %s", e)

dp.startup.register(on_startup)

# ====== –ó–ê–ü–£–°–ö ======
if __name__ == "__main__":
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç Telegram...")
    dp.run_polling(bot)
